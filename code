#include <TM1637Display.h>
/*PIN DECLARATION*/
#define CLK 2
#define DIO 3
#define b1 9
#define b2 8
#define b3 7
#define slide_switch 5
#define LED_pin 6
#define buzzer_pin 10

/*variable declaration*/

/*time parameter*/
int clkSec =0;
int clkMin =0;
int clkHour =0;

int alarmMin=0;
int alarmHour=0;

int displayA=0;
int displayB=0;

bool state=0;
bool isAlarmOn=0; //apakah fitur alarm dinyakan
bool isAlarmActive=0; //apakah alarm menyala
bool LEDState=0;

/*function declaration*/
void addClkSec();
void addClkMin();
void addClkHour();

void addAlarmMin();
void addAlarmHour();

void displayTime(int displayA, int displayB);

/*debouncing variables*/
unsigned long last_b1_millis=millis();
unsigned long last_b2_millis=millis();
unsigned long last_b3_millis=millis();

/*Create a display object of type TM1637Display*/
TM1637Display display = TM1637Display(CLK, DIO);

void setup()
{
  // initialize timer1 
  noInterrupts();           // disable all interrupts
  TCCR1A = 0;
  TCCR1B = 0;
  TCNT1  = 0;

  OCR1A = 62500;            // compare match register 16MHz/256/1Hz
  TCCR1B |= (1 << WGM12);   // CTC mode
  TCCR1B |= (1 << CS12);    // 256 prescaler 
  TIMSK1 |= (1 << OCIE1A);  // enable timer compare interrupt
  interrupts();             // enable all interrupts
}

ISR(TIMER1_COMPA_vect)          // timer compare interrupt service routine
{
  addClkSec();

  if(isAlarmActive==1) {
    digitalWrite(LED_pin, !LEDState);
    digitalWrite(buzzer_pin, HIGH);
  } 
}

void loop() {
  //state 0 : clock
  if(state==0) { //state clock
    if(digitalRead(b1)==HIGH && (millis()-last_b1_millis>=250)) {
      addClkHour();
      last_b1_millis=millis();
      }
    if(digitalRead(b2)==HIGH && (millis()-last_b2_millis>=250)){
      addClkMin();
      last_b2_millis=millis();
      }
    if(digitalRead(b3)==LOW && (millis()-last_b3_millis>=250)) {
      displayA=clkHour;
      displayB=clkMin;
      last_b3_millis=millis();
    }
    else { //ShowSec
      displayA=clkMin;
      displayB=clkSec;
    }
  }

  //state 1 : alarm
  else if(state==1) {
    if(digitalRead(b1)==HIGH&& last_b1_millis-millis()>=250) {
      addAlarmHour();
      last_b2_millis=millis();
      }
    if(digitalRead(b1)==HIGH&& last_b1_millis-millis()>=250) {
      addAlarmMin();
      last_b2_millis=millis();
      }
    displayA=alarmHour;
    displayB=alarmMin;
  }

  //KONDISI ALARM MENYALA
  if(clkHour==alarmHour && clkMin==alarmMin) {
    isAlarmActive=1;
  }

  //mematikan alarm
  if(isAlarmActive==1) {
    if(digitalRead(b3)==HIGH && last_b3_millis-millis()>=250) {
      isAlarmActive=0;
      LEDState=0;
      last_b3_millis=millis();
    }
  }
  displayTime(displayA,displayB);
}

void addClkSec() {
  clkSec++;
  if(clkSec ==60) {
    clkSec=0;
    addClkMin();
  }
}

void addClkMin() {
  clkMin++;
  if(clkMin==60) {
    clkMin=0;
    addClkHour();
  }
}

void addClkHour() {
  clkHour++;
  if(clkHour==24) {
    clkHour=0;
  }
}

void displayTime(int displayA,int displayB) {
  int num = 100*displayA+displayB;
  display.showNumberDecEx(num, 0b11100000, false, 4, 0);
}
